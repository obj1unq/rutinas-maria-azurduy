import rutinas.*

describe "rutinas" {
	const correrEnLaPlaya = new Running(intensidad=1.2) // Una actividad de running con intensisdad 1.2
	const remarEnElDelta = new Remo()
	const remarEnCaminoRemeros = new RemoCompeticion() // Una actividad de remo comptetitivo
    const maratonBA = new Maraton(intensidad=1.5)   //Una maraton con intensidad 1.5

	const calamardo = new Sedentaria(peso=60,tiempo=5) //Una persona Sedentaria con peso 60 y tiempo de ejercicio 5
 	const bob = new Atleta(peso=40)

	const recreo = new Predio(rutinas=#{correrEnLaPlaya,maratonBA})
	const nautico = new Predio(rutinas=#{correrEnLaPlaya,maratonBA})
	const clubBarrial = new Club(predios = #{ recreo, nautico })

// PUNTO 1
test "1.1 consulta running" {
	//that: es para booleanos. 
	//equals: es para igualdad. ejemplo dos numeros.
	assert.equals(360, correrEnLaPlaya.caloriasQuemadas(5))
	assert.equals(10200, correrEnLaPlaya.caloriasQuemadas(90))

}

	test "1.2 consulta maraton" {
		assert.equals(900,maratonBA.caloriasQuemadas(5))
		assert.equals(25500,maratonBA.caloriasQuemadas(90))
	}

	test "1.3 consulta remo" {
		assert.equals(520,remarEnElDelta.caloriasQuemadas(5))
		assert.equals(9360,remarEnElDelta.caloriasQuemadas(90))
	}

	test "1.4 consulta remo competitivo" {
		assert.equals(510,remarEnCaminoRemeros.caloriasQuemadas(5))
		assert.equals(12750,remarEnCaminoRemeros.caloriasQuemadas(90))
	}

//Punto 2: Personas
	//ATENCION: usar el metodo truncate(3) para truncar un numero a 3 decimales
	// Ej: 1.2345.truncate(3) -> devuelve 1.234 
	
	test "2.1.1 test sedentario running" {
		calamardo.aplicar(correrEnLaPlaya)
		assert.equals(59.948,calamardo.peso().truncate(3))
	} 
	
	test "2.1.2 test sedentario maraton" {
		calamardo.aplicar(maratonBA)
		assert.equals(59.871,calamardo.peso().truncate(3))
	} 

	test "2.1.3 test sedentario remo" {
		calamardo.aplicar(remarEnElDelta)
		assert.equals(59.925,calamardo.peso().truncate(3))

	} 

	test "2.1.3 test sedentario remo competicion" {
		calamardo.aplicar(remarEnCaminoRemeros)
		assert.equals(59.927,calamardo.peso().truncate(3))
	} 
	
	test "2.1.5 test sedentario no puede practicar" {
		assert.equals(60,calamardo.peso()) 
		calamardo.peso(40)
		assert.equals(40,calamardo.peso()) 
		assert.throwsException({calamardo.aplicar(correrEnLaPlaya)})
	} 
	
	test "2.2.1 test atleta running" {
		bob.aplicar(correrEnLaPlaya)
		assert.equals(39.725,bob.peso().truncate(3))
	 }

	test "2.2.2 test atleta maraton" {
		bob.aplicar(maratonBA)
		assert.equals(37.812,bob.peso().truncate(3))
	 }

	test "2.2.3 test atleta remo" {
		assert.throwsException({bob.aplicar(remarEnElDelta)})
		assert.equals(40,bob.peso().truncate(3))
		// hacer que bob practique remarEnElDelta( NO SE PUEDE!)
		// el peso de bob debería ser 40 
	}

	test "2.2.3 test atleta remo de competición" {
		bob.aplicar(remarEnCaminoRemeros)
		assert.equals(39.406,bob.peso().truncate(3))
	}
	 
//punto 3: Consultas
	test "3.1 el mejor predio" {
//		//El mejor predio del clubBarrial para bob debería ser recreo		
//		//El mejor predio del clubBarrial para calamardo debería ser recreo		
//	}	
	
//	test "3.2 predios tranquis" {
//		//No debería haber predios tranquis en el clubBarrial para bob
//		//Los predios tranquis del clubBarrial para calamardo solo incluyen a recreo  
//	}
	
//	test "3.3 rutinas más exigentes" {
//		//Las rutinas más exigentes del clubBarrial para bob son maratonBA y remarEnCaminoRemeros
//		//Las rutinas más exigentes del clubBarrial para calamardo son maratonBA y remarEnElDelta
//	}
	
}
}